class DashCSS {
  // Initialize scroll animations
  static initScrollAnimations() {
    const scrollElements = document.querySelectorAll('[data-dash-scroll]');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('dash-scroll-visible');
          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.1
    });

    scrollElements.forEach(el => observer.observe(el));
  }

  // Initialize drag panels
  static initDragPanels() {
    document.querySelectorAll('.dash-drag-panel').forEach(panel => {
      let isDragging = false;
      let startX, startY;

      panel.addEventListener('mousedown', (e) => {
        isDragging = true;
        panel.classList.add('dragging');
        startX = e.clientX;
        startY = e.clientY;
      });

      document.addEventListener('mousemove', (e) => {
        if (!isDragging) return;
        
        const x = e.clientX - startX;
        const y = e.clientY - startY;
        
        panel.style.transform = `
          rotateY(${x / 10}deg)
          rotateX(${-y / 10}deg)
          translate3d(${x / 20}px, ${y / 20}px, 0)
        `;
      });

      document.addEventListener('mouseup', () => {
        if (!isDragging) return;
        isDragging = false;
        panel.classList.remove('dragging');
        
        setTimeout(() => {
          panel.style.transform = '';
        }, 300);
      });
    });
  }

  // Initialize playground UI
  static initPlayground() {
    const playground = document.createElement('div');
    playground.className = 'dash-playground';
    playground.innerHTML = `
      <h3>DashCSS Playground</h3>
      <div class="playground-controls">
        <label>Animation Speed</label>
        <input type="range" min="0.1" max="2" step="0.1" value="0.6" id="dash-speed-control">
        
        <label>3D Perspective</label>
        <input type="range" min="500" max="2000" step="100" value="1200" id="dash-perspective-control">
        
        <button id="dash-reset">Reset All</button>
      </div>
    `;
    
    document.body.appendChild(playground);
    
    const toggle = document.createElement('div');
    toggle.className = 'dash-playground-toggle';
    toggle.innerHTML = '⚙️';
    toggle.addEventListener('click', () => {
      playground.classList.toggle('dash-playground-visible');
    });
    
    document.body.appendChild(toggle);
    
    // Connect controls
    document.getElementById('dash-speed-control').addEventListener('input', (e) => {
      document.documentElement.style.setProperty('--dash-speed', `${e.target.value}s`);
    });
    
    document.getElementById('dash-perspective-control').addEventListener('input', (e) => {
      document.documentElement.style.setProperty('--dash-perspective', `${e.target.value}px`);
    });
    
    document.getElementById('dash-reset').addEventListener('click', () => {
      document.documentElement.style.removeProperty('--dash-speed');
      document.documentElement.style.removeProperty('--dash-perspective');
    });
  }

  // Initialize everything
  static init() {
    this.initScrollAnimations();
    this.initDragPanels();
    this.initPlayground();
  }
}

// Auto-initialize when DOM loads
document.addEventListener('DOMContentLoaded', () => DashCSS.init());
